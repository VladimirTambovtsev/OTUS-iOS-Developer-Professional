//
// ArticleListResponseDocsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ArticleListResponseDocsInner: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var journal: String?
    public var eissn: String?
    public var publicationDate: String?
    public var articleType: String?
    public var authorDisplay: [String]?
    public var abstract: [String]?
    public var titleDisplay: String?
    public var score: Double?

    public init(id: String? = nil, journal: String? = nil, eissn: String? = nil, publicationDate: String? = nil, articleType: String? = nil, authorDisplay: [String]? = nil, abstract: [String]? = nil, titleDisplay: String? = nil, score: Double? = nil) {
        self.id = id
        self.journal = journal
        self.eissn = eissn
        self.publicationDate = publicationDate
        self.articleType = articleType
        self.authorDisplay = authorDisplay
        self.abstract = abstract
        self.titleDisplay = titleDisplay
        self.score = score
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case journal
        case eissn
        case publicationDate = "publication_date"
        case articleType = "article_type"
        case authorDisplay = "author_display"
        case abstract
        case titleDisplay = "title_display"
        case score
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(journal, forKey: .journal)
        try container.encodeIfPresent(eissn, forKey: .eissn)
        try container.encodeIfPresent(publicationDate, forKey: .publicationDate)
        try container.encodeIfPresent(articleType, forKey: .articleType)
        try container.encodeIfPresent(authorDisplay, forKey: .authorDisplay)
        try container.encodeIfPresent(abstract, forKey: .abstract)
        try container.encodeIfPresent(titleDisplay, forKey: .titleDisplay)
        try container.encodeIfPresent(score, forKey: .score)
    }
}

